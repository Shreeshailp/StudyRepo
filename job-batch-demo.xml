<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	">

	<import resource="../config/spring-context.xml" />
	<import resource="../config/spring-datasource.xml" />
    
    <!-- .DAT File Reading Configuration Starts here -->
    <!-- <bean id="aOGEOS" class="com.shree.spring.batch.AOGEOS"
        scope="prototype" />  
      <bean id="aOGEOSItemProcessor" class="com.shree.spring.batch.item.processor.AOGEOSItemProcessor" />
      <bean id="aOGEOSFlatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

        <property name="resource" value="classpath:dat/sample_request_file_AO_GEOS_CRONOS_DIALOG_ELIADE.dat" />
        <property name="linesToSkip" value="1" />
        <property name="lineMapper">
           
           <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean id="fixedLengthTokenizer"
                        class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
                        <property name="strict" value="false"/>
                        <property name="names" value="value1,value2" />
                        <property name="columns" value="1-57, 683-691" />
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="com.shree.spring.batch.mapper.AOGEOSFieldSetMapper" />
                    </property>
            </bean>
           
            </property>
            </bean>
            <bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>com.shree.spring.batch.AOGEOS</value>
            </list>
        </property>
    </bean>
            
             <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <property name="resource" value="file:xml/outputs/aogeos.xml" />
      <property name="marshaller" ref="reportMarshaller" />
        <property name="rootTagName" value="AOGEOS" /> 
    </bean>
     <batch:job id="aOGEOSDataProcessJob">
       
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="aOGEOSFlatFileItemReader" writer="xmlItemWriter"
                    processor="aOGEOSItemProcessor" commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        
    </batch:job>     -->
    
    <!-- .DAT File Reading Configuration Ends here -->    
    
    
            
    <!--         

	<bean id="employee" class="com.shree.spring.batch.Employee"
		scope="prototype" />
        
	<bean id="itemProcessor" class="com.shree.spring.batch.item.processor.EmployeeItemProcessor" />
 -->
	<!-- <batch:job id="DemoJobXMLWriter">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="csvFileItemReader" writer="xmlItemWriter"
					processor="itemProcessor" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job> -->
    
    
    

	<!-- <bean id="csvFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		<property name="resource" value="classpath:csv/input/report.csv" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id,firstName,lastName,address,salary,age,doj" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.shree.spring.batch.mapper.EmployeeFieldSetMapper" />

					if no data type conversion, use BeanWrapperFieldSetMapper to map 
						by name <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"> 
						<property name="prototypeBeanName" value="report" /> </bean>
				</property>
			</bean>
		</property>

	</bean> -->

	<!-- <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<property name="resource" value="file:xml/outputs/report.xml" />
		<property name="marshaller" ref="reportMarshaller" />
		<property name="rootTagName" value="report" />
	</bean>

	<bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>com.shree.spring.batch.Employee</value>
			</list>
		</property>
	</bean> -->
    <!-- Optional JobExecutionListener to perform business logic before and after the job -->
    <!-- <bean id="jobListener" class="com.shree.spring.batch.listener.EmployeeDataJobListener" /> -->
    
    <!-- Actual Job -->
    <!-- <batch:job id="employeeDataProcessJob">
        <batch:step id="step1">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="flatFileItemReader" writer="xmlItemWriter"  processor="itemProcessor" commit-interval="10" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="csvFileItemReader" writer="xmlItemWriter"
                    processor="itemProcessor" commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="jobListener" />
        </batch:listeners>
    </batch:job> -->
    
    
    <!-- XML File Reading Configuration Starts here --> 

 <batch:job id="reportJob">
    <batch:step id="step1">
    <batch:tasklet>
        <batch:chunk reader="xmlItemReader" 
            writer="cvsFileItemWriter" processor="filterReportProcessor"
            commit-interval="1">
        </batch:chunk>
    </batch:tasklet>
    </batch:step>
  </batch:job>

  <!-- Filtering process -->
  <bean id="filterReportProcessor" class="com.shree.spring.batch.item.processor.FilterReportProcessor" />

  <bean id="xmlItemReader" 
        class="org.springframework.batch.item.xml.StaxEventItemReader">
    <property name="fragmentRootElementName" value="record" />
    <property name="resource" value="classpath:xml/report.xml" />
    <property name="unmarshaller" ref="reportUnmarshaller" />
  </bean>

  <!-- Read and map values to object, via jaxb2 -->
  <bean id="reportUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
    <property name="classesToBeBound">
    <list>
        <value>com.shree.spring.batch.Report</value>
    </list>
    </property>
  </bean>
  
  <bean id="cvsFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
    <!-- write to this csv file -->
    <property name="resource" value="file:cvs/report.csv" />
    <property name="shouldDeleteIfExists" value="true" />

    <property name="lineAggregator">
      <bean
        class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
        <property name="delimiter" value="," />
        <property name="fieldExtractor">
          <bean
            class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
            <property name="names" value="refId, name, age" />
           </bean>
        </property>
       </bean>
    </property>
  </bean>

<!-- XML File Reading Configuration Ends here --> 
</beans>